---
import { Icon } from 'astro-icon/components';
---

<div class='relative'>
  <button
    id='theme-toggle'
    class='flex cursor-pointer items-center justify-center rounded-sm p-2 transition-colors duration-300 ease-in-out hover:bg-amber-100 dark:hover:bg-amber-900/30'
    aria-label='Toggle theme'
    title='Toggle theme'
  >
    <Icon
      id='theme-light'
      name='material-symbols:light-mode-outline'
      size={20}
      class='hidden'
    />
    <Icon
      id='theme-dark'
      name='material-symbols:dark-mode-outline'
      size={20}
      class='hidden'
    />
    <Icon
      id='theme-system'
      name='material-symbols:computer-outline'
      size={20}
      class='hidden'
    />
  </button>

  <div
    id='theme-menu'
    class='absolute top-12 right-0 z-50 hidden min-w-[120px] rounded-md border border-gray-200 bg-white px-1 py-1 font-sans shadow-lg dark:border-gray-700 dark:bg-gray-800'
  >
    <button
      data-theme='light'
      class='flex w-full cursor-pointer items-center gap-2 rounded-md px-3 py-2 text-left text-sm hover:bg-amber-100 dark:hover:bg-amber-900/30'
    >
      <Icon name='material-symbols:light-mode-outline' size={16} />
      Light
    </button>
    <button
      data-theme='dark'
      class='flex w-full cursor-pointer items-center gap-2 rounded-md px-3 py-2 text-left text-sm hover:bg-amber-100 dark:hover:bg-amber-900/30'
    >
      <Icon name='material-symbols:dark-mode-outline' size={16} />
      Dark
    </button>
    <button
      data-theme='system'
      class='flex w-full cursor-pointer items-center gap-2 rounded-md px-3 py-2 text-left text-sm hover:bg-amber-100 dark:hover:bg-amber-900/30'
    >
      <Icon name='material-symbols:computer-outline' size={16} />
      System
    </button>
  </div>
</div>

<script>
  import { getTheme, setTheme, applyTheme, type Theme } from '@/lib/theme';

  function updateThemeIcon(theme: Theme) {
    const lightIcon = document.getElementById('theme-light');
    const darkIcon = document.getElementById('theme-dark');
    const systemIcon = document.getElementById('theme-system');

    // Hide all icons
    lightIcon?.classList.add('hidden');
    darkIcon?.classList.add('hidden');
    systemIcon?.classList.add('hidden');

    // Show the appropriate icon
    if (theme === 'light') {
      lightIcon?.classList.remove('hidden');
    } else if (theme === 'dark') {
      darkIcon?.classList.remove('hidden');
    } else {
      systemIcon?.classList.remove('hidden');
    }
  }

  function setThemeAndUpdate(theme: Theme) {
    setTheme(theme);
    updateThemeIcon(theme);
  }

  function toggleThemeMenu() {
    const menu = document.getElementById('theme-menu');
    if (menu) {
      menu.classList.toggle('hidden');
    }
  }

  function hideThemeMenu() {
    const menu = document.getElementById('theme-menu');
    if (menu) {
      menu.classList.add('hidden');
    }
  }

  // Initialize theme on page load
  document.addEventListener('DOMContentLoaded', () => {
    const currentTheme = getTheme();
    updateThemeIcon(currentTheme);

    // Set up event listeners
    const toggleButton = document.getElementById('theme-toggle');
    const themeMenu = document.getElementById('theme-menu');

    toggleButton?.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleThemeMenu();
    });

    // Handle theme selection
    themeMenu?.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      const button = target.closest('[data-theme]') as HTMLElement;
      if (button) {
        const theme = button.getAttribute('data-theme') as Theme;
        setThemeAndUpdate(theme);
        hideThemeMenu();
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', hideThemeMenu);

    // Listen for system theme changes
    window
      .matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', () => {
        const currentTheme = getTheme();
        if (currentTheme === 'system') {
          applyTheme('system');
        }
      });
  });
</script>
